{{- define "sealedclass_base" }}
abstract class SealedClassWithJson {
    abstract val _jsonElement: JsonElement
}

open class SealedClassJsonSerializer<T : SealedClassWithJson> : KSerializer<T> {
    override val descriptor: SerialDescriptor = buildClassSerialDescriptor("SealedClass")

    override fun serialize(encoder: Encoder, value: T) {
        val jsonEncoder = encoder as? JsonEncoder
            ?: throw SerializationException("This serializer only works with JSON")
        jsonEncoder.encodeJsonElement(value._jsonElement)
    }

    override fun deserialize(decoder: Decoder): T {
        throw NotImplementedError("Deserialization is not supported")
    }
}
{{- end }}