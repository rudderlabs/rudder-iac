{{- define "dataclasswithindent" -}}
{{- $indentLevel := (index . 0) -}}
{{- $dataClass := (index . 1) -}}
{{- with $dataClass -}}
{{- if .Comment }}
{{ indent .Indent }}/** {{ .Comment }} */
{{- end }}
{{ indent .Indent }}@Serializable
{{ indent .Indent }}data class {{ .Name }}(
{{- range $index, $prop := .Properties }}{{- if $index }},
{{ end }}
{{- if and $index $prop.Comment }}

{{- end }}
{{- if $prop.Comment }}
{{ indent $.Indent }}    /** {{ $prop.Comment }} */
{{- end }}
{{ indent $.Indent }}    @SerialName("{{ $prop.SerialName }}")
{{ indent $.Indent }}    val {{ $prop.Name }}: {{ $prop.Type }}{{ if $prop.Nullable }}?{{ end }}{{ if $prop.Default }} = {{ $prop.Default }}{{ end }}
{{- end }}
){{- if gt (len .NestedClasses) 0 }} {
{{- range $nested :=.NestedClasses }}
{{- $nestedIndentLevel := (add $indentLevel 1) }}
{{- $ctx := mkSlice $nestedIndentLevel $nested }}
{{- include "dataclasswithindent" $ctx | indent $nestedIndentLevel }}
{{- end }}
}
{{- end }}
{{- end }}
{{- end }}
