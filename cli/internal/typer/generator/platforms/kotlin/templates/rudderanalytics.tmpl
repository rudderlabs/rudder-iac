class RudderAnalytics(private val analytics: Analytics) {
    private val json = Json {
        prettyPrint = true
        encodeDefaults = false
    }

    private val context = buildJsonObject {
        put("ruddertyper", buildJsonObject {
        {{- range $key, $value := .EventContext }}
            put("{{ $key }}", {{ $value }})
        {{- end }}
        })
    }
{{ range .RudderAnalyticsMethods }}
    /**
     * {{ escapeComment .Comment }}
     */
    fun {{ .Name }}({{- range $i, $arg := .MethodArguments -}}{{- if $i }}, {{ end -}}{{- .Name }}: {{ .Type }}{{- if .Nullable }}?{{ end }}{{- if .IsLiteralDefault }} = {{ formatLiteral .Default }}{{- else if .Default }} = {{ .Default }}{{- end }}{{- end -}}) {
        analytics.{{ .SDKCall.MethodName }}(
        {{- range $i, $arg := .SDKCall.Arguments }}
            {{ .Name }} ={{- if .ShouldSerialize }} json.encodeToJsonElement({{- if .IsLiteral }}{{ formatLiteral .Value }}{{- else }}{{ .Value }}{{- end }}).jsonObject{{- else if .IsLiteral }} {{ formatLiteral .Value }}{{- else }} {{ .Value }}{{- end }},
        {{- end }}
            options = RudderOption(customContext = context)
        )
    }
{{ end -}}
}