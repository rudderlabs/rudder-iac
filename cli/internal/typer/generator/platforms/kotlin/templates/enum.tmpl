{{- if .Comment }}
/** {{ escapeComment .Comment }} */
{{- end }}
@Serializable(with = Rudder{{ .Name }}Serializer::class)
enum class {{ .Name }} {
{{- range $index, $value := .Values }}{{- if $index }},
{{- end }}
    {{ $value.Name }}
{{- end }}
}

private object Rudder{{ .Name }}Serializer : KSerializer<{{ .Name }}> {
    override val descriptor = buildClassSerialDescriptor("{{ .Name }}")

    override fun serialize(encoder: Encoder, value: {{ .Name }}) {
        val jsonValue = when (value) {
            {{- range .Values }}
            {{ $.Name }}.{{ .Name }} -> JsonPrimitive({{ .Value }})
            {{- end }}
        }
        encoder.encodeSerializableValue(JsonPrimitive.serializer(), jsonValue)
    }

    override fun deserialize(decoder: Decoder): {{ .Name }} {
        throw SerializationException("Deserialization not supported for {{ .Name }}")
    }
}