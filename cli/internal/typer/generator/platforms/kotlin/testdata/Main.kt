// This file was automatically generated by Rudder CLI 1.0.0.
// Do not modify manually.

package com.rudderstack.ruddertyper

import com.rudderstack.sdk.kotlin.core.Analytics
import com.rudderstack.sdk.kotlin.core.internals.models.RudderOption
import kotlinx.serialization.json.JsonElement
import kotlinx.serialization.json.JsonObject
import kotlinx.serialization.json.JsonPrimitive
import kotlinx.serialization.json.JsonArray
import kotlinx.serialization.json.JsonNull
import kotlinx.serialization.json.buildJsonObject
import kotlinx.serialization.json.put

private fun Unit.rudderSerialize(): JsonObject = buildJsonObject {}
private fun String.rudderSerialize(): JsonPrimitive = JsonPrimitive(this)
private fun Long.rudderSerialize(): JsonPrimitive = JsonPrimitive(this)
private fun Double.rudderSerialize(): JsonPrimitive = JsonPrimitive(this)
private fun Boolean.rudderSerialize(): JsonPrimitive = JsonPrimitive(this)
private fun JsonElement.rudderSerialize(): JsonElement = this
private fun JsonObject.rudderSerialize(): JsonObject = this
private fun JsonArray.rudderSerialize(): JsonArray = this
private fun JsonNull.rudderSerialize(): JsonNull = this

@JvmName("rudderSerializeListUnit")
private fun List<Unit>.rudderSerialize(): JsonArray = JsonArray(this.map { it.rudderSerialize() })
@JvmName("rudderSerializeListString")
private fun List<String>.rudderSerialize(): JsonArray = JsonArray(this.map { it.rudderSerialize() })
@JvmName("rudderSerializeListLong")
private fun List<Long>.rudderSerialize(): JsonArray = JsonArray(this.map { it.rudderSerialize() })
@JvmName("rudderSerializeListDouble")
private fun List<Double>.rudderSerialize(): JsonArray = JsonArray(this.map { it.rudderSerialize() })
@JvmName("rudderSerializeListBoolean")
private fun List<Boolean>.rudderSerialize(): JsonArray = JsonArray(this.map { it.rudderSerialize() })
@JvmName("rudderSerializeListJsonElement")
private fun List<JsonElement>.rudderSerialize(): JsonArray = JsonArray(this.map { it.rudderSerialize() })
@JvmName("rudderSerializeListJsonObject")
private fun List<JsonObject>.rudderSerialize(): JsonArray = JsonArray(this.map { it.rudderSerialize() })
@JvmName("rudderSerializeListJsonArray")
private fun List<JsonArray>.rudderSerialize(): JsonArray = JsonArray(this.map { it.rudderSerialize() })
@JvmName("rudderSerializeListJsonNull")
private fun List<JsonNull>.rudderSerialize(): JsonArray = JsonArray(this.map { it.rudderSerialize() })

/** Whether user is active */
typealias CustomTypeActive = Boolean

/** User's age in years */
typealias CustomTypeAge = Double

/** Custom type for email validation */
typealias CustomTypeEmail = String

/** List of email addresses */
typealias CustomTypeEmailList = List<CustomTypeEmail>

/** Empty object that does not allow additional properties */
typealias CustomTypeEmptyObjectNoAdditionalProps = Unit

/** Empty object that allows additional properties */
typealias CustomTypeEmptyObjectWithAdditionalProps = JsonObject

/** Custom type representing a null value */
typealias CustomTypeNullType = JsonNull

/** List of user profiles */
typealias CustomTypeProfileList = List<CustomTypeUserProfile>

/** User active status */
typealias PropertyActive = CustomTypeActive

/** User's age */
typealias PropertyAge = CustomTypeAge

/** An array that can contain any type of items */
typealias PropertyArrayOfAny = List<JsonElement>

/** Array with items that can be string or null */
typealias PropertyArrayWithNullItems = List<ArrayItemArrayWithNullItems>

/** Array of user contacts */
typealias PropertyContacts = List<CustomTypeEmail>

/** example of object property */
typealias PropertyContext = JsonObject

/** Property using custom null type */
typealias PropertyCustomNullField = CustomTypeNullType

/** User's email address */
typealias PropertyEmail = CustomTypeEmail

/** User's email addresses */
typealias PropertyEmailList = CustomTypeEmailList

/** Property with empty object not allowing additional properties */
typealias PropertyEmptyObjectNoAdditionalProps = CustomTypeEmptyObjectNoAdditionalProps

/** Property with empty object allowing additional properties */
typealias PropertyEmptyObjectWithAdditionalProps = CustomTypeEmptyObjectWithAdditionalProps

/** Feature configuration information */
typealias PropertyFeatureConfig = CustomTypeFeatureConfig

/** User's first name */
typealias PropertyFirstName = String

/** IP address of the user */
typealias PropertyIpAddress = String

/** User's last name */
typealias PropertyLastName = String

/** Property with mixed unicode: café, naïve, 日本語 */
typealias PropertyMixedUnicode = String

/** An array with items that can be string or integer */
typealias PropertyMultiTypeArray = List<ArrayItemMultiTypeArray>

/** demonstrates multiple levels of nesting */
typealias PropertyNestedContext = JsonObject

/** Nested property with empty object allowing additional properties */
typealias PropertyNestedEmptyObject = JsonObject

/** Nested property with empty object not allowing additional properties */
typealias PropertyNestedEmptyObjectNoAdditionalProps = JsonObject

/** Property that is always null */
typealias PropertyNullField = JsonNull

/** An object field with no defined structure */
typealias PropertyObjectProperty = JsonObject

/** Page context information */
typealias PropertyPageContext = CustomTypePageContext

/** Additional page data */
typealias PropertyPageData = JsonObject

/** Type of page */
typealias PropertyPageType = String

/** Product identifier */
typealias PropertyProductId = String

/** User profile data */
typealias PropertyProfile = CustomTypeUserProfile

/** List of related user profiles */
typealias PropertyProfileList = CustomTypeProfileList

/** A field that can contain any type of value */
typealias PropertyPropertyOfAny = JsonElement

/** Search query */
typealias PropertyQuery = String

/** Field with special chars: "quotes", backslash\path, and /\* comment *\/ */
typealias PropertySpecialField = String

/** User account status */
typealias PropertyStatus = CustomTypeStatus

/** User tags as array of strings */
typealias PropertyTags = List<String>

/** Property using custom type with Unicode */
typealias PropertyUnicodeCustomType = CustomTypeТипыДанных

/** An array with no explicit item type (treated as any) */
typealias PropertyUntypedArray = List<JsonElement>

/** A field with no explicit type (treated as any) */
typealias PropertyUntypedField = JsonElement

/** User access information */
typealias PropertyUserAccess = CustomTypeUserAccess

/** Username in Chinese characters */
typealias Property用户名 = String

/** Empty event schema with additionalProperties true */
typealias TrackEmptyEventWithAdditionalPropsProperties = JsonObject

/** User status enum */
enum class CustomTypeStatus {
    PENDING,
    ACTIVE,
    SUSPENDED,
    DELETED
}

fun CustomTypeStatus.rudderSerialize(): JsonElement = when (this) {
    CustomTypeStatus.PENDING -> JsonPrimitive("pending")
    CustomTypeStatus.ACTIVE -> JsonPrimitive("active")
    CustomTypeStatus.SUSPENDED -> JsonPrimitive("suspended")
    CustomTypeStatus.DELETED -> JsonPrimitive("deleted")
}
@JvmName("rudderSerializeListCustomTypeStatus")
fun List<CustomTypeStatus>.rudderSerialize(): JsonArray = JsonArray(this.map { it.rudderSerialize() })


/** Custom type with Cyrillic name */
enum class CustomTypeТипыДанных {
    АКТИВНЫЙ,
    НЕАКТИВНЫЙ,
    PENDING
}

fun CustomTypeТипыДанных.rudderSerialize(): JsonElement = when (this) {
    CustomTypeТипыДанных.АКТИВНЫЙ -> JsonPrimitive("активный")
    CustomTypeТипыДанных.НЕАКТИВНЫЙ -> JsonPrimitive("неактивный")
    CustomTypeТипыДанных.PENDING -> JsonPrimitive("pending")
}
@JvmName("rudderSerializeListCustomTypeТипыДанных")
fun List<CustomTypeТипыДанных>.rudderSerialize(): JsonArray = JsonArray(this.map { it.rudderSerialize() })


/** Type of device */
enum class PropertyDeviceType {
    MOBILE,
    TABLET,
    DESKTOP,
    SMART_TV,
    IO_T_DEVICE
}

fun PropertyDeviceType.rudderSerialize(): JsonElement = when (this) {
    PropertyDeviceType.MOBILE -> JsonPrimitive("mobile")
    PropertyDeviceType.TABLET -> JsonPrimitive("tablet")
    PropertyDeviceType.DESKTOP -> JsonPrimitive("desktop")
    PropertyDeviceType.SMART_TV -> JsonPrimitive("smartTV")
    PropertyDeviceType.IO_T_DEVICE -> JsonPrimitive("IoT-Device")
}
@JvmName("rudderSerializeListPropertyDeviceType")
fun List<PropertyDeviceType>.rudderSerialize(): JsonArray = JsonArray(this.map { it.rudderSerialize() })


/** Feature enabled flag */
enum class PropertyEnabled {
    TRUE,
    FALSE
}

fun PropertyEnabled.rudderSerialize(): JsonElement = when (this) {
    PropertyEnabled.TRUE -> JsonPrimitive(true)
    PropertyEnabled.FALSE -> JsonPrimitive(false)
}
@JvmName("rudderSerializeListPropertyEnabled")
fun List<PropertyEnabled>.rudderSerialize(): JsonArray = JsonArray(this.map { it.rudderSerialize() })


/** Mixed type enum */
enum class PropertyMixedValue {
    ACTIVE,
    _1,
    TRUE,
    _2_5
}

fun PropertyMixedValue.rudderSerialize(): JsonElement = when (this) {
    PropertyMixedValue.ACTIVE -> JsonPrimitive("active")
    PropertyMixedValue._1 -> JsonPrimitive(1)
    PropertyMixedValue.TRUE -> JsonPrimitive(true)
    PropertyMixedValue._2_5 -> JsonPrimitive(2.5)
}
@JvmName("rudderSerializeListPropertyMixedValue")
fun List<PropertyMixedValue>.rudderSerialize(): JsonArray = JsonArray(this.map { it.rudderSerialize() })


/** Priority level */
enum class PropertyPriority {
    _1,
    _2,
    _3
}

fun PropertyPriority.rudderSerialize(): JsonElement = when (this) {
    PropertyPriority._1 -> JsonPrimitive(1)
    PropertyPriority._2 -> JsonPrimitive(2)
    PropertyPriority._3 -> JsonPrimitive(3)
}
@JvmName("rudderSerializeListPropertyPriority")
fun List<PropertyPriority>.rudderSerialize(): JsonArray = JsonArray(this.map { it.rudderSerialize() })


/** Rating value */
enum class PropertyRating {
    _1_5,
    _2_5,
    _3_5,
    _4_5,
    _5
}

fun PropertyRating.rudderSerialize(): JsonElement = when (this) {
    PropertyRating._1_5 -> JsonPrimitive(1.5)
    PropertyRating._2_5 -> JsonPrimitive(2.5)
    PropertyRating._3_5 -> JsonPrimitive(3.5)
    PropertyRating._4_5 -> JsonPrimitive(4.5)
    PropertyRating._5 -> JsonPrimitive(5)
}
@JvmName("rudderSerializeListPropertyRating")
fun List<PropertyRating>.rudderSerialize(): JsonArray = JsonArray(this.map { it.rudderSerialize() })


/** HTTP status with special characters */
enum class PropertyStatusCode {
    _200_OK,
    _404_NOT_FOUND,
    _500_INTERNAL_SERVER_ERROR
}

fun PropertyStatusCode.rudderSerialize(): JsonElement = when (this) {
    PropertyStatusCode._200_OK -> JsonPrimitive("200: OK")
    PropertyStatusCode._404_NOT_FOUND -> JsonPrimitive("404: Not Found")
    PropertyStatusCode._500_INTERNAL_SERVER_ERROR -> JsonPrimitive("500: Internal \"Server\" Error")
}
@JvmName("rudderSerializeListPropertyStatusCode")
fun List<PropertyStatusCode>.rudderSerialize(): JsonArray = JsonArray(this.map { it.rudderSerialize() })


/** Field demonstrating various Unicode characters in enum values */
enum class PropertyUnicodeEnumField {
    _1,
    _2,
    АКТИВНЫЙ,
    已完成,
    ΕΝΕΡΓΌΣ,
    CAFÉ,
    ___1
}

fun PropertyUnicodeEnumField.rudderSerialize(): JsonElement = when (this) {
    PropertyUnicodeEnumField._1 -> JsonPrimitive("🎯")
    PropertyUnicodeEnumField._2 -> JsonPrimitive("✅")
    PropertyUnicodeEnumField.АКТИВНЫЙ -> JsonPrimitive("активный")
    PropertyUnicodeEnumField.已完成 -> JsonPrimitive("已完成")
    PropertyUnicodeEnumField.ΕΝΕΡΓΌΣ -> JsonPrimitive("ενεργός")
    PropertyUnicodeEnumField.CAFÉ -> JsonPrimitive("café")
    PropertyUnicodeEnumField.___1 -> JsonPrimitive("!!!")
}
@JvmName("rudderSerializeListPropertyUnicodeEnumField")
fun List<PropertyUnicodeEnumField>.rudderSerialize(): JsonArray = JsonArray(this.map { it.rudderSerialize() })


/** Feature configuration with variants based on multi-type flag */
sealed class CustomTypeFeatureConfig {
    /** Feature flag that can be boolean or string */
    abstract val featureFlag: PropertyFeatureFlag
    abstract val _jsonElement: JsonObject

    /** Feature enabled (boolean true) */
    data class CaseTrue(
        /** User's age */
        val age: PropertyAge? = null
    ) : CustomTypeFeatureConfig() {
        /** Feature flag that can be boolean or string */
        override val featureFlag: PropertyFeatureFlag = PropertyFeatureFlag.BooleanValue(true)
        override val _jsonElement: JsonObject = buildJsonObject {
            age?.let { put("age", it.rudderSerialize()) }
            put("feature_flag", featureFlag.rudderSerialize())
        }
    }

    /** Feature disabled (boolean false) */
    data class CaseFalse(
        /** User's first name */
        val firstName: PropertyFirstName? = null
    ) : CustomTypeFeatureConfig() {
        /** Feature flag that can be boolean or string */
        override val featureFlag: PropertyFeatureFlag = PropertyFeatureFlag.BooleanValue(false)
        override val _jsonElement: JsonObject = buildJsonObject {
            firstName?.let { put("first_name", it.rudderSerialize()) }
            put("feature_flag", featureFlag.rudderSerialize())
        }
    }

    /** Feature in beta (string 'beta') */
    data class CaseBeta(
        /** User tags as array of strings */
        val tags: PropertyTags? = null
    ) : CustomTypeFeatureConfig() {
        /** Feature flag that can be boolean or string */
        override val featureFlag: PropertyFeatureFlag = PropertyFeatureFlag.StringValue("beta")
        override val _jsonElement: JsonObject = buildJsonObject {
            tags?.let { put("tags", it.rudderSerialize()) }
            put("feature_flag", featureFlag.rudderSerialize())
        }
    }

    /** Default case */
    data class Default(
        /** Feature flag that can be boolean or string */
        override val featureFlag: PropertyFeatureFlag
    ) : CustomTypeFeatureConfig() {
        override val _jsonElement: JsonObject = buildJsonObject {
            put("feature_flag", featureFlag.rudderSerialize())
        }
    }
}

fun CustomTypeFeatureConfig.rudderSerialize(): JsonObject = this._jsonElement
@JvmName("rudderSerializeListCustomTypeFeatureConfig")
fun List<CustomTypeFeatureConfig>.rudderSerialize(): JsonArray = JsonArray(this.map { it.rudderSerialize() })

/** Page context with variants based on page type */
sealed class CustomTypePageContext {
    /** Type of page */
    abstract val pageType: PropertyPageType
    abstract val _jsonElement: JsonObject

    /** Search page variant */
    data class CaseSearch(
        /** Search query */
        val query: PropertyQuery
    ) : CustomTypePageContext() {
        /** Type of page */
        override val pageType: PropertyPageType = "search"
        override val _jsonElement: JsonObject = buildJsonObject {
            put("query", query.rudderSerialize())
            put("page_type", pageType.rudderSerialize())
        }
    }

    /** Product page variant */
    data class CaseProduct(
        /** Product identifier */
        val productId: PropertyProductId
    ) : CustomTypePageContext() {
        /** Type of page */
        override val pageType: PropertyPageType = "product"
        override val _jsonElement: JsonObject = buildJsonObject {
            put("product_id", productId.rudderSerialize())
            put("page_type", pageType.rudderSerialize())
        }
    }

    /** Home page variant with no additional properties */
    class CaseHome() : CustomTypePageContext() {
        /** Type of page */
        override val pageType: PropertyPageType = "home"
        override val _jsonElement: JsonObject = buildJsonObject {
            put("page_type", pageType.rudderSerialize())
        }
    }

    /** Default case */
    data class Default(
        /** Additional page data */
        val pageData: PropertyPageData? = null,

        /** Type of page */
        override val pageType: PropertyPageType
    ) : CustomTypePageContext() {
        override val _jsonElement: JsonObject = buildJsonObject {
            pageData?.let { put("page_data", it.rudderSerialize()) }
            put("page_type", pageType.rudderSerialize())
        }
    }
}

fun CustomTypePageContext.rudderSerialize(): JsonObject = this._jsonElement
@JvmName("rudderSerializeListCustomTypePageContext")
fun List<CustomTypePageContext>.rudderSerialize(): JsonArray = JsonArray(this.map { it.rudderSerialize() })

/** User access with variants based on active status */
sealed class CustomTypeUserAccess {
    /** User active status */
    abstract val active: PropertyActive
    abstract val _jsonElement: JsonObject

    /** Active user access */
    data class CaseTrue(
        /** User's email address */
        val email: PropertyEmail
    ) : CustomTypeUserAccess() {
        /** User active status */
        override val active: PropertyActive = true
        override val _jsonElement: JsonObject = buildJsonObject {
            put("email", email.rudderSerialize())
            put("active", active.rudderSerialize())
        }
    }

    /** Inactive user access */
    data class CaseFalse(
        /** User account status */
        val status: PropertyStatus
    ) : CustomTypeUserAccess() {
        /** User active status */
        override val active: PropertyActive = false
        override val _jsonElement: JsonObject = buildJsonObject {
            put("status", status.rudderSerialize())
            put("active", active.rudderSerialize())
        }
    }

    /** Default case */
    data class Default(
        /** User active status */
        override val active: PropertyActive
    ) : CustomTypeUserAccess() {
        override val _jsonElement: JsonObject = buildJsonObject {
            put("active", active.rudderSerialize())
        }
    }
}

fun CustomTypeUserAccess.rudderSerialize(): JsonObject = this._jsonElement
@JvmName("rudderSerializeListCustomTypeUserAccess")
fun List<CustomTypeUserAccess>.rudderSerialize(): JsonArray = JsonArray(this.map { it.rudderSerialize() })

/** Item type for array_with_null_items array */
sealed class ArrayItemArrayWithNullItems {
    abstract val _jsonElement: JsonElement
    /** Represents a 'string' value */
    data class StringValue(
        val value: String
    ) : ArrayItemArrayWithNullItems() {

        override val _jsonElement: JsonElement = JsonPrimitive(value)
    }

    /** Represents a 'null' value */
    data class NullValue(
        val value: JsonNull
    ) : ArrayItemArrayWithNullItems() {

        override val _jsonElement: JsonElement = value
    }
}

fun ArrayItemArrayWithNullItems.rudderSerialize(): JsonElement = this._jsonElement
@JvmName("rudderSerializeListArrayItemArrayWithNullItems")
fun List<ArrayItemArrayWithNullItems>.rudderSerialize(): JsonArray = JsonArray(this.map { it.rudderSerialize() })

/** Feature flag that can be boolean or string */
sealed class PropertyFeatureFlag {
    abstract val _jsonElement: JsonElement
    /** Represents a 'boolean' value */
    data class BooleanValue(
        val value: Boolean
    ) : PropertyFeatureFlag() {

        override val _jsonElement: JsonElement = JsonPrimitive(value)
    }

    /** Represents a 'string' value */
    data class StringValue(
        val value: String
    ) : PropertyFeatureFlag() {

        override val _jsonElement: JsonElement = JsonPrimitive(value)
    }
}

fun PropertyFeatureFlag.rudderSerialize(): JsonElement = this._jsonElement
@JvmName("rudderSerializeListPropertyFeatureFlag")
fun List<PropertyFeatureFlag>.rudderSerialize(): JsonArray = JsonArray(this.map { it.rudderSerialize() })

/** Item type for multi_type_array array */
sealed class ArrayItemMultiTypeArray {
    abstract val _jsonElement: JsonElement
    /** Represents a 'string' value */
    data class StringValue(
        val value: String
    ) : ArrayItemMultiTypeArray() {

        override val _jsonElement: JsonElement = JsonPrimitive(value)
    }

    /** Represents a 'integer' value */
    data class IntegerValue(
        val value: Long
    ) : ArrayItemMultiTypeArray() {

        override val _jsonElement: JsonElement = JsonPrimitive(value)
    }
}

fun ArrayItemMultiTypeArray.rudderSerialize(): JsonElement = this._jsonElement
@JvmName("rudderSerializeListArrayItemMultiTypeArray")
fun List<ArrayItemMultiTypeArray>.rudderSerialize(): JsonArray = JsonArray(this.map { it.rudderSerialize() })

/** A field that can be string, integer, or boolean */
sealed class PropertyMultiTypeField {
    abstract val _jsonElement: JsonElement
    /** Represents a 'string' value */
    data class StringValue(
        val value: String
    ) : PropertyMultiTypeField() {

        override val _jsonElement: JsonElement = JsonPrimitive(value)
    }

    /** Represents a 'integer' value */
    data class IntegerValue(
        val value: Long
    ) : PropertyMultiTypeField() {

        override val _jsonElement: JsonElement = JsonPrimitive(value)
    }

    /** Represents a 'boolean' value */
    data class BooleanValue(
        val value: Boolean
    ) : PropertyMultiTypeField() {

        override val _jsonElement: JsonElement = JsonPrimitive(value)
    }
}

fun PropertyMultiTypeField.rudderSerialize(): JsonElement = this._jsonElement
@JvmName("rudderSerializeListPropertyMultiTypeField")
fun List<PropertyMultiTypeField>.rudderSerialize(): JsonArray = JsonArray(this.map { it.rudderSerialize() })

/** Property that can be string, integer, or null */
sealed class PropertyMultiTypeWithNull {
    abstract val _jsonElement: JsonElement
    /** Represents a 'string' value */
    data class StringValue(
        val value: String
    ) : PropertyMultiTypeWithNull() {

        override val _jsonElement: JsonElement = JsonPrimitive(value)
    }

    /** Represents a 'integer' value */
    data class IntegerValue(
        val value: Long
    ) : PropertyMultiTypeWithNull() {

        override val _jsonElement: JsonElement = JsonPrimitive(value)
    }

    /** Represents a 'null' value */
    data class NullValue(
        val value: JsonNull
    ) : PropertyMultiTypeWithNull() {

        override val _jsonElement: JsonElement = value
    }
}

fun PropertyMultiTypeWithNull.rudderSerialize(): JsonElement = this._jsonElement
@JvmName("rudderSerializeListPropertyMultiTypeWithNull")
fun List<PropertyMultiTypeWithNull>.rudderSerialize(): JsonArray = JsonArray(this.map { it.rudderSerialize() })

/** Property that can be number or null */
sealed class PropertyNumberOrNull {
    abstract val _jsonElement: JsonElement
    /** Represents a 'number' value */
    data class NumberValue(
        val value: Double
    ) : PropertyNumberOrNull() {

        override val _jsonElement: JsonElement = JsonPrimitive(value)
    }

    /** Represents a 'null' value */
    data class NullValue(
        val value: JsonNull
    ) : PropertyNumberOrNull() {

        override val _jsonElement: JsonElement = value
    }
}

fun PropertyNumberOrNull.rudderSerialize(): JsonElement = this._jsonElement
@JvmName("rudderSerializeListPropertyNumberOrNull")
fun List<PropertyNumberOrNull>.rudderSerialize(): JsonArray = JsonArray(this.map { it.rudderSerialize() })

/** Property that can be string or null */
sealed class PropertyStringOrNull {
    abstract val _jsonElement: JsonElement
    /** Represents a 'string' value */
    data class StringValue(
        val value: String
    ) : PropertyStringOrNull() {

        override val _jsonElement: JsonElement = JsonPrimitive(value)
    }

    /** Represents a 'null' value */
    data class NullValue(
        val value: JsonNull
    ) : PropertyStringOrNull() {

        override val _jsonElement: JsonElement = value
    }
}

fun PropertyStringOrNull.rudderSerialize(): JsonElement = this._jsonElement
@JvmName("rudderSerializeListPropertyStringOrNull")
fun List<PropertyStringOrNull>.rudderSerialize(): JsonArray = JsonArray(this.map { it.rudderSerialize() })

/** Example event to demonstrate variants */
sealed class TrackEventWithVariantsProperties {
    /** Type of device */
    abstract val deviceType: PropertyDeviceType
    abstract val _jsonElement: JsonObject

    /** Mobile device page view */
    data class CaseMobile(
        /** Page context information */
        val pageContext: PropertyPageContext? = null,

        /** User profile data */
        val profile: PropertyProfile,

        /** User tags as array of strings */
        val tags: PropertyTags? = null
    ) : TrackEventWithVariantsProperties() {
        /** Type of device */
        override val deviceType: PropertyDeviceType = PropertyDeviceType.MOBILE
        override val _jsonElement: JsonObject = buildJsonObject {
            pageContext?.let { put("page_context", it.rudderSerialize()) }
            put("profile", profile.rudderSerialize())
            tags?.let { put("tags", it.rudderSerialize()) }
            put("device_type", deviceType.rudderSerialize())
        }
    }

    /** Desktop page view */
    data class CaseDesktop(
        /** User's first name */
        val firstName: PropertyFirstName,

        /** User's last name */
        val lastName: PropertyLastName? = null,

        /** Page context information */
        val pageContext: PropertyPageContext? = null,

        /** User profile data */
        val profile: PropertyProfile
    ) : TrackEventWithVariantsProperties() {
        /** Type of device */
        override val deviceType: PropertyDeviceType = PropertyDeviceType.DESKTOP
        override val _jsonElement: JsonObject = buildJsonObject {
            put("first_name", firstName.rudderSerialize())
            lastName?.let { put("last_name", it.rudderSerialize()) }
            pageContext?.let { put("page_context", it.rudderSerialize()) }
            put("profile", profile.rudderSerialize())
            put("device_type", deviceType.rudderSerialize())
        }
    }

    /** Default case */
    data class Default(
        /** Type of device */
        override val deviceType: PropertyDeviceType,

        /** Page context information */
        val pageContext: PropertyPageContext? = null,

        /** User profile data */
        val profile: PropertyProfile,

        /** A field with no explicit type (treated as any) */
        val untypedField: PropertyUntypedField? = null
    ) : TrackEventWithVariantsProperties() {
        override val _jsonElement: JsonObject = buildJsonObject {
            put("device_type", deviceType.rudderSerialize())
            pageContext?.let { put("page_context", it.rudderSerialize()) }
            put("profile", profile.rudderSerialize())
            untypedField?.let { put("untyped_field", it.rudderSerialize()) }
        }
    }
}

fun TrackEventWithVariantsProperties.rudderSerialize(): JsonObject = this._jsonElement
@JvmName("rudderSerializeListTrackEventWithVariantsProperties")
fun List<TrackEventWithVariantsProperties>.rudderSerialize(): JsonArray = JsonArray(this.map { it.rudderSerialize() })

/** User profile information */
data class CustomTypeUserProfile(
    /** User's email address */
    val email: PropertyEmail,

    /** User's first name */
    val firstName: PropertyFirstName,

    /** User's last name */
    val lastName: PropertyLastName? = null
)
fun CustomTypeUserProfile.rudderSerialize(): JsonObject = buildJsonObject {
    put("email", email.rudderSerialize())
    put("first_name", firstName.rudderSerialize())
    if (lastName != null) {
        put("last_name", lastName.rudderSerialize())
    }
}
@JvmName("rudderSerializeListCustomTypeUserProfile")
fun List<CustomTypeUserProfile>.rudderSerialize(): JsonArray = JsonArray(this.map { it.rudderSerialize() })

/** Group association event */
data class GroupTraits(
    /** User active status */
    val active: PropertyActive
)
fun GroupTraits.rudderSerialize(): JsonObject = buildJsonObject {
    put("active", active.rudderSerialize())
}
@JvmName("rudderSerializeListGroupTraits")
fun List<GroupTraits>.rudderSerialize(): JsonArray = JsonArray(this.map { it.rudderSerialize() })

/** User identification event */
data class IdentifyTraits(
    /** User active status */
    val active: PropertyActive? = null,

    /** User's email address */
    val email: PropertyEmail
)
fun IdentifyTraits.rudderSerialize(): JsonObject = buildJsonObject {
    if (active != null) {
        put("active", active.rudderSerialize())
    }
    put("email", email.rudderSerialize())
}
@JvmName("rudderSerializeListIdentifyTraits")
fun List<IdentifyTraits>.rudderSerialize(): JsonArray = JsonArray(this.map { it.rudderSerialize() })

/** Page view event */
data class PageProperties(
    /** User profile data */
    val profile: PropertyProfile
)
fun PageProperties.rudderSerialize(): JsonObject = buildJsonObject {
    put("profile", profile.rudderSerialize())
}
@JvmName("rudderSerializeListPageProperties")
fun List<PageProperties>.rudderSerialize(): JsonArray = JsonArray(this.map { it.rudderSerialize() })

/** Screen view event */
data class ScreenProperties(
    /** User profile data */
    val profile: PropertyProfile? = null
)
fun ScreenProperties.rudderSerialize(): JsonObject = buildJsonObject {
    if (profile != null) {
        put("profile", profile.rudderSerialize())
    }
}
@JvmName("rudderSerializeListScreenProperties")
fun List<ScreenProperties>.rudderSerialize(): JsonArray = JsonArray(this.map { it.rudderSerialize() })

/** Triggered when user clicks on a "premium" product /\* important *\/ */
data class TrackProductPremiumClickedProperties(
    /** Field with special chars: "quotes", backslash\path, and /\* comment *\/ */
    val specialField: PropertySpecialField,

    /** HTTP status with special characters */
    val statusCode: PropertyStatusCode? = null
)
fun TrackProductPremiumClickedProperties.rudderSerialize(): JsonObject = buildJsonObject {
    put("special_field", specialField.rudderSerialize())
    if (statusCode != null) {
        put("status_code", statusCode.rudderSerialize())
    }
}
@JvmName("rudderSerializeListTrackProductPremiumClickedProperties")
fun List<TrackProductPremiumClickedProperties>.rudderSerialize(): JsonArray = JsonArray(this.map { it.rudderSerialize() })

/** Triggered when a user signs up */
data class TrackUserSignedUpProperties(
    /** User active status */
    val active: PropertyActive,

    /** User's age */
    val age: PropertyAge? = null,

    /** An array that can contain any type of items */
    val arrayOfAny: PropertyArrayOfAny? = null,

    /** Array with items that can be string or null */
    val arrayWithNullItems: PropertyArrayWithNullItems? = null,

    /** Array of user contacts */
    val contacts: PropertyContacts? = null,

    /** example of object property */
    val context: TrackUserSignedUpProperties.Context? = null,

    /** Property using custom null type */
    val customNullField: PropertyCustomNullField? = null,

    /** Type of device */
    val deviceType: PropertyDeviceType? = null,

    /** User's email addresses */
    val emailList: PropertyEmailList? = null,

    /** Property with empty object not allowing additional properties */
    val emptyObjectNoAdditionalProps: PropertyEmptyObjectNoAdditionalProps? = null,

    /** Property with empty object allowing additional properties */
    val emptyObjectWithAdditionalProps: PropertyEmptyObjectWithAdditionalProps? = null,

    /** Feature enabled flag */
    val enabled: PropertyEnabled? = null,

    /** Feature configuration information */
    val featureConfig: PropertyFeatureConfig? = null,

    /** Property with mixed unicode: café, naïve, 日本語 */
    val mixedUnicode: PropertyMixedUnicode? = null,

    /** Mixed type enum */
    val mixedValue: PropertyMixedValue? = null,

    /** An array with items that can be string or integer */
    val multiTypeArray: PropertyMultiTypeArray? = null,

    /** A field that can be string, integer, or boolean */
    val multiTypeField: PropertyMultiTypeField? = null,

    /** Property that can be string, integer, or null */
    val multiTypeWithNull: PropertyMultiTypeWithNull? = null,

    /** Nested property with empty object allowing additional properties */
    val nestedEmptyObject: PropertyNestedEmptyObject? = null,

    /** Nested property with empty object not allowing additional properties */
    val nestedEmptyObjectNoAdditionalProps: Unit? = null,

    /** Property that is always null */
    val nullField: PropertyNullField? = null,

    /** Property that can be number or null */
    val numberOrNull: PropertyNumberOrNull? = null,

    /** An object field with no defined structure */
    val objectProperty: PropertyObjectProperty? = null,

    /** Priority level */
    val priority: PropertyPriority? = null,

    /** User profile data */
    val profile: PropertyProfile,

    /** List of related user profiles */
    val profileList: PropertyProfileList? = null,

    /** A field that can contain any type of value */
    val propertyOfAny: PropertyPropertyOfAny? = null,

    /** Rating value */
    val rating: PropertyRating? = null,

    /** User account status */
    val status: PropertyStatus? = null,

    /** Property that can be string or null */
    val stringOrNull: PropertyStringOrNull? = null,

    /** User tags as array of strings */
    val tags: PropertyTags? = null,

    /** Property using custom type with Unicode */
    val unicodeCustomType: PropertyUnicodeCustomType? = null,

    /** Field demonstrating various Unicode characters in enum values */
    val unicodeEnumField: PropertyUnicodeEnumField? = null,

    /** An array with no explicit item type (treated as any) */
    val untypedArray: PropertyUntypedArray? = null,

    /** A field with no explicit type (treated as any) */
    val untypedField: PropertyUntypedField? = null,

    /** User access information */
    val userAccess: PropertyUserAccess? = null,

    /** Username in Chinese characters */
    val 用户名: Property用户名? = null
) {
    /** example of object property */
    data class Context(
        /** IP address of the user */
        val ipAddress: PropertyIpAddress,

        /** demonstrates multiple levels of nesting */
        val nestedContext: TrackUserSignedUpProperties.Context.NestedContext
    ) {
        /** demonstrates multiple levels of nesting */
        data class NestedContext(
            /** User profile data */
            val profile: PropertyProfile? = null
        )
        fun NestedContext.rudderSerialize(): JsonObject = buildJsonObject {
            if (profile != null) {
                put("profile", profile.rudderSerialize())
            }
        }
        @JvmName("rudderSerializeListNestedContext")
        fun List<NestedContext>.rudderSerialize(): JsonArray = JsonArray(this.map { it.rudderSerialize() })
    }
    fun Context.rudderSerialize(): JsonObject = buildJsonObject {
        put("ip_address", ipAddress.rudderSerialize())
        put("nested_context", nestedContext.rudderSerialize())
    }
    @JvmName("rudderSerializeListContext")
    fun List<Context>.rudderSerialize(): JsonArray = JsonArray(this.map { it.rudderSerialize() })
}
fun TrackUserSignedUpProperties.rudderSerialize(): JsonObject = buildJsonObject {
    put("active", active.rudderSerialize())
    if (age != null) {
        put("age", age.rudderSerialize())
    }
    if (arrayOfAny != null) {
        put("array_of_any", arrayOfAny.rudderSerialize())
    }
    if (arrayWithNullItems != null) {
        put("array_with_null_items", arrayWithNullItems.rudderSerialize())
    }
    if (contacts != null) {
        put("contacts", contacts.rudderSerialize())
    }
    if (context != null) {
        put("context", context.rudderSerialize())
    }
    if (customNullField != null) {
        put("custom_null_field", customNullField.rudderSerialize())
    }
    if (deviceType != null) {
        put("device_type", deviceType.rudderSerialize())
    }
    if (emailList != null) {
        put("email_list", emailList.rudderSerialize())
    }
    if (emptyObjectNoAdditionalProps != null) {
        put("empty_object_no_additional_props", emptyObjectNoAdditionalProps.rudderSerialize())
    }
    if (emptyObjectWithAdditionalProps != null) {
        put("empty_object_with_additional_props", emptyObjectWithAdditionalProps.rudderSerialize())
    }
    if (enabled != null) {
        put("enabled", enabled.rudderSerialize())
    }
    if (featureConfig != null) {
        put("feature_config", featureConfig.rudderSerialize())
    }
    if (mixedUnicode != null) {
        put("mixed_unicode", mixedUnicode.rudderSerialize())
    }
    if (mixedValue != null) {
        put("mixed_value", mixedValue.rudderSerialize())
    }
    if (multiTypeArray != null) {
        put("multi_type_array", multiTypeArray.rudderSerialize())
    }
    if (multiTypeField != null) {
        put("multi_type_field", multiTypeField.rudderSerialize())
    }
    if (multiTypeWithNull != null) {
        put("multi_type_with_null", multiTypeWithNull.rudderSerialize())
    }
    if (nestedEmptyObject != null) {
        put("nested_empty_object", nestedEmptyObject.rudderSerialize())
    }
    if (nestedEmptyObjectNoAdditionalProps != null) {
        put("nested_empty_object_no_additional_props", nestedEmptyObjectNoAdditionalProps.rudderSerialize())
    }
    if (nullField != null) {
        put("null_field", nullField.rudderSerialize())
    }
    if (numberOrNull != null) {
        put("number_or_null", numberOrNull.rudderSerialize())
    }
    if (objectProperty != null) {
        put("object_property", objectProperty.rudderSerialize())
    }
    if (priority != null) {
        put("priority", priority.rudderSerialize())
    }
    put("profile", profile.rudderSerialize())
    if (profileList != null) {
        put("profile_list", profileList.rudderSerialize())
    }
    if (propertyOfAny != null) {
        put("property_of_any", propertyOfAny.rudderSerialize())
    }
    if (rating != null) {
        put("rating", rating.rudderSerialize())
    }
    if (status != null) {
        put("status", status.rudderSerialize())
    }
    if (stringOrNull != null) {
        put("string_or_null", stringOrNull.rudderSerialize())
    }
    if (tags != null) {
        put("tags", tags.rudderSerialize())
    }
    if (unicodeCustomType != null) {
        put("unicode_custom_type", unicodeCustomType.rudderSerialize())
    }
    if (unicodeEnumField != null) {
        put("unicode_enum_field", unicodeEnumField.rudderSerialize())
    }
    if (untypedArray != null) {
        put("untyped_array", untypedArray.rudderSerialize())
    }
    if (untypedField != null) {
        put("untyped_field", untypedField.rudderSerialize())
    }
    if (userAccess != null) {
        put("user_access", userAccess.rudderSerialize())
    }
    if (用户名 != null) {
        put("用户名", 用户名.rudderSerialize())
    }
}
@JvmName("rudderSerializeListTrackUserSignedUpProperties")
fun List<TrackUserSignedUpProperties>.rudderSerialize(): JsonArray = JsonArray(this.map { it.rudderSerialize() })

/** Merges the ruddertyper context with user-provided custom context */
private fun mergeRudderContext(userOptions: RudderOption?, ruddertyperContext: JsonObject): RudderOption {
    return if (userOptions == null) {
        RudderOption(customContext = ruddertyperContext)
    } else {
        // Merge contexts: start with ruddertyper context, then apply user's custom context
        val mergedContext = buildJsonObject {
            // Add ruddertyper context first
            for ((key, value) in ruddertyperContext) {
                put(key, value)
            }
            // Merge in user's custom context (if provided)
            for ((key, value) in userOptions.customContext) {
                put(key, value)
            }
        }
        // Copy all properties from userOptions and set merged context
        userOptions.copy(customContext = mergedContext)
    }
}

/**
 * This file provides type-safe wrappers for tracking events with RudderStack based on your tracking plan.
 *
 * ## Tracking Plan
 * - **Name**: [Test Plan](https://app.rudderstack.com/trackingPlans/plan_12345)
 * - **ID**: plan_12345
 * - **Version**: 13
 *
 * ## Quick Start
 *
 * Initialize RudderStack Analytics:
 * ```kotlin
 * val analytics = Analytics(
 *     configuration = Configuration(
 *         writeKey = "YOUR_WRITE_KEY",
 *         dataPlaneUrl = "YOUR_DATA_PLANE_URL"
 *     ),
 *     application = application
 * )
 * val rudderAnalytics = RudderAnalytics(analytics)
 * ```
 *
 * Track events using the generated type-safe methods.
 *
 * For more information, refer to:
 * - [RudderStack Kotlin SDK Documentation](https://github.com/rudderlabs/rudder-sdk-kotlin)
 */
class RudderAnalytics(private val analytics: Analytics) {
    private val context = buildJsonObject {
        put("ruddertyper", buildJsonObject {
            put("platform", "kotlin")
            put("rudderCLIVersion", "1.0.0")
            put("trackingPlanId", "plan_12345")
            put("trackingPlanVersion", 13)
        })
    }

    /**
     * Group association event
     *
     * @param groupId
     * @param traits
     * @param options Optional RudderStack options for this event
     *
     * @see com.rudderstack.sdk.kotlin.core.Analytics.group
     */
    fun group(groupId: String, traits: GroupTraits, options: RudderOption? = null) {
        analytics.group(
            groupId = groupId,
            traits = traits.rudderSerialize(),
            options = mergeRudderContext(options, context)
        )
    }

    /**
     * User identification event
     *
     * @param userId
     * @param traits
     * @param options Optional RudderStack options for this event
     *
     * @see com.rudderstack.sdk.kotlin.core.Analytics.identify
     */
    fun identify(userId: String = "", traits: IdentifyTraits, options: RudderOption? = null) {
        analytics.identify(
            userId = userId,
            traits = traits.rudderSerialize(),
            options = mergeRudderContext(options, context)
        )
    }

    /**
     * Screen view event
     *
     * @param screenName
     * @param category
     * @param properties
     * @param options Optional RudderStack options for this event
     *
     * @see com.rudderstack.sdk.kotlin.core.Analytics.screen
     */
    fun screen(screenName: String, category: String = "", properties: ScreenProperties, options: RudderOption? = null) {
        analytics.screen(
            screenName = screenName,
            category = category,
            properties = properties.rudderSerialize(),
            options = mergeRudderContext(options, context)
        )
    }

    /**
     * Empty event schema with additionalProperties false
     * @param options Optional RudderStack options for this event
     *
     * @see com.rudderstack.sdk.kotlin.core.Analytics.track
     */
    fun trackEmptyEventNoAdditionalProps(options: RudderOption? = null) {
        analytics.track(
            name = "Empty Event No Additional Props",
            options = mergeRudderContext(options, context)
        )
    }

    /**
     * Empty event schema with additionalProperties true
     *
     * @param properties
     * @param options Optional RudderStack options for this event
     *
     * @see com.rudderstack.sdk.kotlin.core.Analytics.track
     */
    fun trackEmptyEventWithAdditionalProps(properties: TrackEmptyEventWithAdditionalPropsProperties, options: RudderOption? = null) {
        analytics.track(
            name = "Empty Event With Additional Props",
            properties = properties.rudderSerialize(),
            options = mergeRudderContext(options, context)
        )
    }

    /**
     * Example event to demonstrate variants
     *
     * @param properties
     * @param options Optional RudderStack options for this event
     *
     * @see com.rudderstack.sdk.kotlin.core.Analytics.track
     */
    fun trackEventWithVariants(properties: TrackEventWithVariantsProperties, options: RudderOption? = null) {
        analytics.track(
            name = "Event With Variants",
            properties = properties.rudderSerialize(),
            options = mergeRudderContext(options, context)
        )
    }

    /**
     * Triggered when user clicks on a "premium" product /\* important *\/
     *
     * @param properties
     * @param options Optional RudderStack options for this event
     *
     * @see com.rudderstack.sdk.kotlin.core.Analytics.track
     */
    fun trackProductPremiumClicked(properties: TrackProductPremiumClickedProperties, options: RudderOption? = null) {
        analytics.track(
            name = "Product \"Premium\" Clicked",
            properties = properties.rudderSerialize(),
            options = mergeRudderContext(options, context)
        )
    }

    /**
     * Triggered when a user signs up
     *
     * @param properties
     * @param options Optional RudderStack options for this event
     *
     * @see com.rudderstack.sdk.kotlin.core.Analytics.track
     */
    fun trackUserSignedUp(properties: TrackUserSignedUpProperties, options: RudderOption? = null) {
        analytics.track(
            name = "User Signed Up",
            properties = properties.rudderSerialize(),
            options = mergeRudderContext(options, context)
        )
    }
}