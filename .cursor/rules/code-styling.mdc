---
description: 
globs: 
alwaysApply: true
---
# Code Styling Conventions

> This rule defines the project's coding standards and best practices. It covers Go code style, error handling patterns, testing approaches, and CLI design principles to ensure consistent, maintainable, and high-quality code throughout the codebase.

## Go Code Style

- Follow standard Go formatting (use `gofmt` or `go fmt`)
- Keep functions small and focused on a single responsibility
- Use meaningful variable and function names
- Document public functions and packages with comments
- **MUST** Use `any` instead of `interface{}`

## Constants Over Magic Numbers
- Replace hard-coded values with named constants
- Use descriptive constant names that explain the value's purpose
- Keep constants at the top of the file or in a dedicated constants file

## Meaningful Names
- Variables, functions, and classes should reveal their purpose
- Names should explain why something exists and how it's used
- Avoid abbreviations unless they're universally understood

## Smart Comments
- Don't comment on what the code does - make the code self-documenting
- Use comments to explain why something is done a certain way
- Document APIs, complex algorithms, and non-obvious side effects

## Single Responsibility
- Each function should do exactly one thing
- Functions should be small and focused
- If a function needs a comment to explain what it does, it should be split

## DRY (Don't Repeat Yourself)
- Extract repeated code into reusable functions
- Share common logic through proper abstraction
- Maintain single sources of truth

## Clean Structure
- Keep related code together
- Organize code in a logical hierarchy
- Use consistent file and folder naming conventions

## Encapsulation
- Hide implementation details
- Expose clear interfaces
- Move nested conditionals into well-named functions

## Code Quality Maintenance
- Refactor continuously
- Fix technical debt early
- Leave code cleaner than you found it

## Error Handling

- Always check errors and handle them appropriately
- Use descriptive error messages
- Consider using structured errors where appropriate

## Testing

- Write unit tests for all non-trivial functions
- Use table-driven tests where appropriate
- Mock external dependencies in tests
- Aim for high test coverage (see [coverage.out](mdc:coverage.out))

## Command Line Interface

- Use consistent flag naming across commands
- Provide clear help text for all commands and flags
- Support both flags and environment variables for configuration
